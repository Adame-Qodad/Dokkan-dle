{% extends 'base.html.twig' %}

{% block title %}{{ app.request.attributes.get('translations').units_list|default('Liste des personnages') }} - Dokkan'dle{% endblock %}

{% block body %}
    <!-- Header Section -->
    <div class="page-header">
        <div class="header-content">
            <h1 class="page-title">
                <i class="fas fa-users"></i>
                {{ app.request.attributes.get('translations').units_list|default('Liste des personnages') }}
            </h1>
            <p class="page-subtitle">Découvrez tous les personnages de Dragon Ball Z: Dokkan Battle</p>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="filters-section card">
        <form method="get" action="{{ path('units_list') }}" class="filters-form">
            <div class="filters-grid">
                <div class="filter-group">
                    <label for="search">
                        <i class="fas fa-search"></i>
                        Recherche
                    </label>
                    <input type="text" id="search" name="search" 
                           placeholder="{{ app.request.attributes.get('translations').search_placeholder|default('Rechercher par nom') }}" 
                           value="{{ search }}" class="filter-input">
                </div>

                <div class="filter-group">
                    <label for="rarity">
                        <i class="fas fa-star"></i>
                        Rareté
                    </label>
                    <select id="rarity" name="rarity" class="filter-select">
                        <option value="">{{ app.request.attributes.get('translations').all_rarities|default('Toutes raretés') }}</option>
                        <option value="LR" {{ filterRarity == 'LR' ? 'selected' : '' }}>LR - Légendaire</option>
                        <option value="UR" {{ filterRarity == 'UR' ? 'selected' : '' }}>UR - Ultra Rare</option>
                        <option value="SSR" {{ filterRarity == 'SSR' ? 'selected' : '' }}>SSR - Super Rare</option>
                        <option value="SR" {{ filterRarity == 'SR' ? 'selected' : '' }}>SR - Rare</option>
                        <option value="R" {{ filterRarity == 'R' ? 'selected' : '' }}>R - Commun</option>
                        <option value="N" {{ filterRarity == 'N' ? 'selected' : '' }}>N - Normal</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="type">
                        <i class="fas fa-palette"></i>
                        Type
                    </label>
                    <select id="type" name="type" class="filter-select">
                        <option value="">{{ app.request.attributes.get('translations').all_types|default('Tous types') }}</option>
                        <option value="AGL" {{ filterType == 'AGL' ? 'selected' : '' }}>AGL - Agilité</option>
                        <option value="TEQ" {{ filterType == 'TEQ' ? 'selected' : '' }}>TEQ - Technique</option>
                        <option value="INT" {{ filterType == 'INT' ? 'selected' : '' }}>INT - Intelligence</option>
                        <option value="STR" {{ filterType == 'STR' ? 'selected' : '' }}>STR - Force</option>
                        <option value="PHY" {{ filterType == 'PHY' ? 'selected' : '' }}>PHY - Physique</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="sort">
                        <i class="fas fa-sort"></i>
                        Tri
                    </label>
                    <select id="sort" name="sort" class="filter-select">
                        <option value="">{{ app.request.attributes.get('translations').sort_by|default('Trier par') }}</option>
                        <option value="name" {{ sort == 'name' ? 'selected' : '' }}>{{ app.request.attributes.get('translations').sort_name|default('Nom') }}</option>
                        <option value="rarity" {{ sort == 'rarity' ? 'selected' : '' }}>{{ app.request.attributes.get('translations').sort_rarity|default('Rareté') }}</option>
                    </select>
                </div>
            </div>

            <div class="filters-actions">
                <button type="submit" class="btn">
                    <i class="fas fa-filter"></i>
                    {{ app.request.attributes.get('translations').filter_btn|default('Filtrer') }}
                </button>
                <a href="{{ path('units_list') }}" class="btn btn-secondary">
                    <i class="fas fa-undo"></i>
                    Réinitialiser
                </a>
            </div>
        </form>
    </div>

    <!-- Results Section -->
    <div class="results-section">
        <div class="results-header">
            <h2>Résultats ({{ units|length }} personnages)</h2>
            <div class="view-toggle">
                <button class="view-btn active" data-view="grid">
                    <i class="fas fa-th"></i>
                </button>
                <button class="view-btn" data-view="list">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </div>

        <div class="units-grid" id="units-container">
            {% for unit in units %}
                <div class="unit-card card" data-rarity="{{ unit.rarity|lower }}" data-type="{{ unit.type is defined ? unit.type|lower : '' }}">
                    <div class="unit-image">
                        <img src="{{ unit.localImagePath is defined and unit.localImagePath ? unit.localImagePath : unit.imageURL }}" 
                             alt="{{ unit.name }}" 
                             onerror="this.onerror=null; this.src='/images/fallback.png'">
                        <div class="unit-overlay">
                            <div class="unit-badges">
                                <span class="rarity-badge rarity-{{ unit.rarity|lower }}">{{ unit.rarity }}</span>
                                {% if unit.type is defined and unit.type %}
                                    <span class="type-badge type-{{ unit.type|lower }}">{{ unit.type }}</span>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                    
                    <div class="unit-info">
                        <h3 class="unit-name">{{ unit.name }}</h3>
                        {% if unit.title is defined %}
                            <p class="unit-title">{{ unit.title }}</p>
                        {% endif %}
                        <div class="unit-stats">
                            {% if unit.class is defined %}
                                <span class="unit-class">{{ unit.class }}</span>
                            {% endif %}
                            {% if unit.cost is defined %}
                                <span class="unit-cost">Coût: {{ unit.cost }}</span>
                            {% endif %}
                        </div>
                    </div>

                    <div class="unit-actions">
                        <a href="{{ path('unit_show', {id: unit.id}) }}" class="btn btn-sm">
                            <i class="fas fa-eye"></i>
                            Voir détails
                        </a>
                    </div>
                </div>
            {% else %}
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <h3>{{ app.request.attributes.get('translations').no_characters|default('Aucun personnage trouvé.') }}</h3>
                    <p>Essayez de modifier vos critères de recherche.</p>
                </div>
            {% endfor %}
        </div>
    </div>

    <style>
        /* Page Header */
        .page-header {
            background: var(--gradient-primary);
            margin: -2rem -2rem 2rem -2rem;
            padding: 3rem 2rem;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.1)"/><circle cx="10" cy="60" r="0.5" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="40" r="0.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

        .page-title {
            font-family: 'Orbitron', monospace;
            font-size: 2.5rem;
            font-weight: 900;
            margin-bottom: 1rem;
            color: var(--text-light);
            position: relative;
            z-index: 1;
        }

        .page-title i {
            margin-right: 1rem;
            color: var(--accent-color);
        }

        .page-subtitle {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.9);
            position: relative;
            z-index: 1;
        }

        /* Filters Section */
        .filters-section {
            margin-bottom: 2rem;
        }

        .filters-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .filter-group label {
            font-weight: 600;
            color: var(--text-light);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .filter-group label i {
            color: var(--primary-color);
        }

        .filter-input, .filter-select {
            padding: 0.8rem 1rem;
            border: 2px solid rgba(255, 107, 53, 0.2);
            border-radius: 10px;
            background: var(--card-bg);
            color: var(--text-light);
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .filter-input:focus, .filter-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
        }

        .filters-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn-secondary {
            background: var(--gradient-secondary);
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }

        /* Results Section */
        .results-section {
            margin-top: 2rem;
        }

        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 1rem 0;
            border-bottom: 2px solid rgba(255, 107, 53, 0.2);
        }

        .results-header h2 {
            font-family: 'Orbitron', monospace;
            color: var(--text-light);
        }

        .view-toggle {
            display: flex;
            gap: 0.5rem;
        }

        .view-btn {
            padding: 0.5rem;
            border: 2px solid var(--primary-color);
            background: transparent;
            color: var(--text-light);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .view-btn.active, .view-btn:hover {
            background: var(--gradient-primary);
        }

        /* Units Grid */
        .units-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 2rem;
        }

        .unit-card {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .unit-card:hover {
            transform: translateY(-10px) scale(1.02);
        }

        .unit-image {
            position: relative;
            height: 200px;
            overflow: hidden;
            border-radius: 15px 15px 0 0;
        }

        .unit-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .unit-card:hover .unit-image img {
            transform: scale(1.1);
        }

        .unit-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(to bottom, transparent 0%, rgba(0,0,0,0.7) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .unit-card:hover .unit-overlay {
            opacity: 1;
        }

        .unit-badges {
            position: absolute;
            top: 1rem;
            right: 1rem;
            display: flex;
            gap: 0.5rem;
        }

        .rarity-badge, .type-badge {
            padding: 0.3rem 0.6rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
            color: var(--text-light);
        }

        .rarity-lr { background: #ff9800; }
        .rarity-ur { background: #e91e63; }
        .rarity-ssr { background: #9c27b0; }
        .rarity-sr { background: #2196f3; }
        .rarity-r { background: #4caf50; }
        .rarity-n { background: #757575; }

        .type-agl { background: #4caf50; }
        .type-teq { background: #ffc107; color: #333; }
        .type-int { background: #9c27b0; }
        .type-str { background: #f44336; }
        .type-phy { background: #2196f3; }

        .unit-info {
            padding: 1.5rem;
        }

        .unit-name {
            font-size: 1.2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--text-light);
            line-height: 1.3;
        }

        .unit-title {
            font-size: 0.9rem;
            color: var(--text-gray);
            margin-bottom: 1rem;
            font-style: italic;
        }

        .unit-stats {
            display: flex;
            justify-content: space-between;
            font-size: 0.8rem;
            color: var(--text-gray);
        }

        .unit-actions {
            padding: 0 1.5rem 1.5rem;
        }

        /* No Results */
        .no-results {
            grid-column: 1 / -1;
            text-align: center;
            padding: 4rem 2rem;
        }

        .no-results i {
            font-size: 4rem;
            color: var(--text-gray);
            margin-bottom: 1rem;
        }

        .no-results h3 {
            font-size: 1.5rem;
            color: var(--text-light);
            margin-bottom: 1rem;
        }

        .no-results p {
            color: var(--text-gray);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .page-title {
                font-size: 2rem;
            }

            .filters-grid {
                grid-template-columns: 1fr;
            }

            .filters-actions {
                flex-direction: column;
            }

            .units-grid {
                grid-template-columns: 1fr;
            }

            .results-header {
                flex-direction: column;
                gap: 1rem;
            }
        }
    </style>

    <script>
        // View toggle functionality
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                const view = this.dataset.view;
                const container = document.getElementById('units-container');
                
                if (view === 'list') {
                    container.style.gridTemplateColumns = '1fr';
                    container.classList.add('list-view');
                } else {
                    container.style.gridTemplateColumns = 'repeat(auto-fill, minmax(280px, 1fr))';
                    container.classList.remove('list-view');
                }
            });
        });

        // Add loading animation
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.unit-card');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.05}s`;
                card.classList.add('fade-in-up');
            });
        });
    </script>
{% endblock %}
